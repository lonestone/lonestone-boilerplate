name: CI ✨

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: 🛠️ Setup
    runs-on: ubuntu-latest
    outputs:
      node-version: 22.14.0
      pnpm-version: 10.6.3
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: 22.14.0
          pnpm-version: 10.6.3

      - name: 📁 Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 📦 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📚 Install dependencies
        run: pnpm install

      - name: 💾 Cache workspace
        uses: actions/cache@v3
        with:
          path: .
          key: workspace-${{ github.sha }}

  lint:
    name: 🧹 Lint
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: 📂 Restore workspace
        uses: actions/cache@v3
        with:
          path: .
          key: workspace-${{ github.sha }}

      - name: 🔧 Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          pnpm-version: ${{ needs.setup.outputs.pnpm-version }}

      - name: 🔍 Run ESLint
        run: pnpm lint

  typecheck:
    name: 🔎 Type Check
    needs: [lint, setup]
    runs-on: ubuntu-latest
    steps:
      - name: 📂 Restore workspace
        uses: actions/cache@v3
        with:
          path: .
          key: workspace-${{ github.sha }}

      - name: 🔧 Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          pnpm-version: ${{ needs.setup.outputs.pnpm-version }}

      - name: 📋 Type check
        run: pnpm -r run typecheck

  build:
    name: 🏗️ Build
    needs: [typecheck, setup]
    runs-on: ubuntu-latest
    steps:
      - name: 📂 Restore workspace
        uses: actions/cache@v3
        with:
          path: .
          key: workspace-${{ github.sha }}

      - name: 🔧 Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          pnpm-version: ${{ needs.setup.outputs.pnpm-version }}

      - name: 🔨 Build packages
        env:
          NODE_ENV: production
          CI: true
        run: pnpm -r build

      - name: 💾 Cache built workspace
        uses: actions/cache@v3
        with:
          path: .
          key: workspace-built-${{ github.sha }}

  test:
    name: 🧪 Test
    needs: [build, setup]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 📂 Restore built workspace
        uses: actions/cache@v3
        with:
          path: .
          key: workspace-built-${{ github.sha }}

      - name: 🔧 Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          pnpm-version: ${{ needs.setup.outputs.pnpm-version }}

      - name: 🧪 Run test
        run: pnpm test
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          API_PORT: 3000
          DATABASE_PORT: 5432
          DATABASE_HOST: localhost
          DATABASE_USER: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_NAME: test_db
          BETTER_AUTH_SECRET: test_secret
          TRUSTED_ORIGINS: '*'
          NODE_ENV: test
