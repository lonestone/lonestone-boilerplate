// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  AppControllerGetHelloData,
  PostControllerGetUserPostsData,
  PostControllerGetUserPostsResponse,
  PostControllerCreatePostData,
  PostControllerCreatePostResponse,
  PostControllerGetUserPostData,
  PostControllerGetUserPostResponse,
  PostControllerUpdatePostData,
  PostControllerUpdatePostResponse,
  PostControllerPublishPostData,
  PostControllerUnpublishPostData,
  PublicPostControllerGetRandomPostData,
  PublicPostControllerGetRandomPostResponse,
  PublicPostControllerGetPostData,
  PublicPostControllerGetPostResponse,
  PublicPostControllerGetPostsData,
  PublicPostControllerGetPostsResponse,
  CommentsControllerGetCommentsData,
  CommentsControllerGetCommentsResponse,
  CommentsControllerCreateCommentData,
  CommentsControllerCreateCommentResponse,
  CommentsControllerGetCommentCountData,
  CommentsControllerGetCommentRepliesData,
  CommentsControllerGetCommentRepliesResponse,
  CommentsControllerDeleteCommentData,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
import {
  postControllerGetUserPostsResponseTransformer,
  postControllerCreatePostResponseTransformer,
  postControllerGetUserPostResponseTransformer,
  postControllerUpdatePostResponseTransformer,
  publicPostControllerGetRandomPostResponseTransformer,
  publicPostControllerGetPostResponseTransformer,
  publicPostControllerGetPostsResponseTransformer,
  commentsControllerGetCommentsResponseTransformer,
  commentsControllerCreateCommentResponseTransformer,
  commentsControllerGetCommentRepliesResponseTransformer,
} from "./transformers.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(
  options?: Options<AppControllerGetHelloData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: "/api",
      ...options,
    }
  );
};

export const postControllerGetUserPosts = <
  ThrowOnError extends boolean = false
>(
  options?: Options<PostControllerGetUserPostsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PostControllerGetUserPostsResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: postControllerGetUserPostsResponseTransformer,
    url: "/api/admin/posts",
    ...options,
  });
};

export const postControllerCreatePost = <ThrowOnError extends boolean = false>(
  options: Options<PostControllerCreatePostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostControllerCreatePostResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: postControllerCreatePostResponseTransformer,
    url: "/api/admin/posts",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postControllerGetUserPost = <ThrowOnError extends boolean = false>(
  options: Options<PostControllerGetUserPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PostControllerGetUserPostResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: postControllerGetUserPostResponseTransformer,
    url: "/api/admin/posts/{id}",
    ...options,
  });
};

export const postControllerUpdatePost = <ThrowOnError extends boolean = false>(
  options: Options<PostControllerUpdatePostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PostControllerUpdatePostResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: postControllerUpdatePostResponseTransformer,
    url: "/api/admin/posts/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postControllerPublishPost = <ThrowOnError extends boolean = false>(
  options: Options<PostControllerPublishPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      url: "/api/admin/posts/{id}/publish",
      ...options,
    }
  );
};

export const postControllerUnpublishPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<PostControllerUnpublishPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      url: "/api/admin/posts/{id}/unpublish",
      ...options,
    }
  );
};

export const publicPostControllerGetRandomPost = <
  ThrowOnError extends boolean = false
>(
  options?: Options<PublicPostControllerGetRandomPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PublicPostControllerGetRandomPostResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: publicPostControllerGetRandomPostResponseTransformer,
    url: "/api/public/posts/random",
    ...options,
  });
};

export const publicPostControllerGetPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<PublicPostControllerGetPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PublicPostControllerGetPostResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: publicPostControllerGetPostResponseTransformer,
    url: "/api/public/posts/{slug}",
    ...options,
  });
};

export const publicPostControllerGetPosts = <
  ThrowOnError extends boolean = false
>(
  options?: Options<PublicPostControllerGetPostsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PublicPostControllerGetPostsResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: publicPostControllerGetPostsResponseTransformer,
    url: "/api/public/posts",
    ...options,
  });
};

export const commentsControllerGetComments = <
  ThrowOnError extends boolean = false
>(
  options: Options<CommentsControllerGetCommentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CommentsControllerGetCommentsResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: commentsControllerGetCommentsResponseTransformer,
    url: "/api/posts/{postSlug}/comments",
    ...options,
  });
};

export const commentsControllerCreateComment = <
  ThrowOnError extends boolean = false
>(
  options: Options<CommentsControllerCreateCommentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CommentsControllerCreateCommentResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: commentsControllerCreateCommentResponseTransformer,
    url: "/api/posts/{postSlug}/comments",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const commentsControllerGetCommentCount = <
  ThrowOnError extends boolean = false
>(
  options: Options<CommentsControllerGetCommentCountData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: "/api/posts/{postSlug}/comments/count",
    ...options,
  });
};

export const commentsControllerGetCommentReplies = <
  ThrowOnError extends boolean = false
>(
  options: Options<CommentsControllerGetCommentRepliesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CommentsControllerGetCommentRepliesResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: commentsControllerGetCommentRepliesResponseTransformer,
    url: "/api/posts/{postSlug}/comments/{commentId}/replies",
    ...options,
  });
};

export const commentsControllerDeleteComment = <
  ThrowOnError extends boolean = false
>(
  options: Options<CommentsControllerDeleteCommentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: "/api/posts/{postSlug}/comments/{commentId}",
    ...options,
  });
};
