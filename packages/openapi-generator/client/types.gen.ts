// This file is auto-generated by @hey-api/openapi-ts

/**
 * Schema for creating/updating a post
 */
export type CreatePostSchema = {
  title: string;
  content: Array<PostContentSchema>;
};

/**
 * Schema for content items (text, image, video)
 */
export type PostContentSchema = {
  type: "text" | "image" | "video";
  data: string;
};

/**
 * Schema for updating a post
 */
export type UpdatePostSchema = {
  title?: string;
  content?: Array<PostContentSchema>;
};

/**
 * Schema for creating a comment
 */
export type CreateCommentSchema = {
  content: string;
  parentId?: string;
};

/**
 * Schema for pagination query
 */
export type PaginationQuerySchema = {
  /**
   * Starting position of the query
   */
  offset?: number;
  /**
   * Number of items to return
   */
  pageSize?: number;
};

/**
 * Starting position of the query
 */
export type PaginationQuerySchemaOffset = number;

/**
 * Number of items to return
 */
export type PaginationQuerySchemaPageSize = number;

/**
 * Schema for sorting items
 */
export type SortingQueryStringSchema = string;

/**
 * Filtering query string, in the format of "property:rule[:value];property:rule[:value];..."
 * <br> Available rules: eq, neq, gt, gte, lt, lte, like, nlike, in, nin, isnull, isnotnull
 * <br> Available properties: content
 */
export type FilterQueryStringSchema = string;

/**
 * Schema for a user's post
 */
export type UserPostSchema = {
  id: string;
  slug?: string | null;
  title: string;
  content: Array<PostContentSchema>;
  versions: Array<PostVersionSchema>;
  publishedAt?: Date | null;
  type: "published" | "draft";
  commentCount?: number;
};

/**
 * Schema for a post version
 */
export type PostVersionSchema = {
  id: string;
  title: string;
  createdAt: Date;
};

/**
 * Schema for a list of user's posts
 */
export type UserPostsSchema = {
  data: Array<{
    id: string;
    slug?: string | null;
    title: string;
    versions: Array<PostVersionSchema>;
    publishedAt?: Date | null;
    type: "published" | "draft";
    commentCount?: number;
    contentPreview: PostContentSchema;
  }>;
  meta: {
    offset: number;
    pageSize: number;
    itemCount: number;
    hasMore: boolean;
  };
};

/**
 * A public post
 */
export type PublicPostSchema = {
  title: string;
  author: {
    name: string;
  };
  content: Array<PostContentSchema>;
  publishedAt: Date;
  slug?: string;
  commentCount?: number;
};

/**
 * A list of public posts
 */
export type PublicPostsSchema = {
  data: Array<{
    title: string;
    author: {
      name: string;
    };
    publishedAt: Date;
    slug?: string;
    commentCount?: number;
    contentPreview: PostContentSchema;
  }>;
  meta: {
    offset: number;
    pageSize: number;
    itemCount: number;
    hasMore: boolean;
  };
};

/**
 * Schema for a comment
 */
export type CommentSchema = {
  id: string;
  content: string;
  authorName: string | null;
  createdAt: Date;
  user: {
    id: string;
    name: string;
  } | null;
  parentId: string | null;
  replyIds?: Array<string>;
  replyCount?: number;
};

/**
 * Schema for a paginated list of comments
 */
export type CommentsSchema = {
  data: Array<CommentSchema>;
  meta: {
    offset: number;
    pageSize: number;
    itemCount: number;
    hasMore: boolean;
  };
};

export type AppControllerGetHelloData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api";
};

export type AppControllerGetHelloResponses = {
  200: unknown;
};

export type PostControllerGetUserPostsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filtering query string, in the format of "property:rule[:value];property:rule[:value];..."
     * <br> Available rules: eq, neq, gt, gte, lt, lte, like, nlike, in, nin, isnull, isnotnull
     * <br> Available properties: title
     */
    filter?: FilterQueryStringSchema;
    /**
     * Schema for sorting items
     */
    sort?: SortingQueryStringSchema;
    offset?: PaginationQuerySchemaOffset;
    pageSize?: PaginationQuerySchemaPageSize;
  };
  url: "/api/admin/posts";
};

export type PostControllerGetUserPostsResponses = {
  /**
   * Schema for a list of user's posts
   */
  200: UserPostsSchema;
};

export type PostControllerGetUserPostsResponse =
  PostControllerGetUserPostsResponses[keyof PostControllerGetUserPostsResponses];

export type PostControllerCreatePostData = {
  /**
   * Schema for creating/updating a post
   */
  body: CreatePostSchema;
  path?: never;
  query?: never;
  url: "/api/admin/posts";
};

export type PostControllerCreatePostResponses = {
  /**
   * Schema for a user's post
   */
  200: UserPostSchema;
};

export type PostControllerCreatePostResponse =
  PostControllerCreatePostResponses[keyof PostControllerCreatePostResponses];

export type PostControllerGetUserPostData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/admin/posts/{id}";
};

export type PostControllerGetUserPostResponses = {
  /**
   * Schema for a user's post
   */
  200: UserPostSchema;
};

export type PostControllerGetUserPostResponse =
  PostControllerGetUserPostResponses[keyof PostControllerGetUserPostResponses];

export type PostControllerUpdatePostData = {
  /**
   * Schema for updating a post
   */
  body: UpdatePostSchema;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/admin/posts/{id}";
};

export type PostControllerUpdatePostResponses = {
  /**
   * Schema for a user's post
   */
  200: UserPostSchema;
};

export type PostControllerUpdatePostResponse =
  PostControllerUpdatePostResponses[keyof PostControllerUpdatePostResponses];

export type PostControllerPublishPostData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/admin/posts/{id}/publish";
};

export type PostControllerPublishPostResponses = {
  201: unknown;
};

export type PostControllerUnpublishPostData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/admin/posts/{id}/unpublish";
};

export type PostControllerUnpublishPostResponses = {
  201: unknown;
};

export type PublicPostControllerGetRandomPostData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/public/posts/random";
};

export type PublicPostControllerGetRandomPostResponses = {
  /**
   * A public post
   */
  200: PublicPostSchema;
};

export type PublicPostControllerGetRandomPostResponse =
  PublicPostControllerGetRandomPostResponses[keyof PublicPostControllerGetRandomPostResponses];

export type PublicPostControllerGetPostData = {
  body?: never;
  path: {
    slug: string;
  };
  query?: never;
  url: "/api/public/posts/{slug}";
};

export type PublicPostControllerGetPostResponses = {
  /**
   * A public post
   */
  200: PublicPostSchema;
};

export type PublicPostControllerGetPostResponse =
  PublicPostControllerGetPostResponses[keyof PublicPostControllerGetPostResponses];

export type PublicPostControllerGetPostsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filtering query string, in the format of "property:rule[:value];property:rule[:value];..."
     * <br> Available rules: eq, neq, gt, gte, lt, lte, like, nlike, in, nin, isnull, isnotnull
     * <br> Available properties: title
     */
    filter?: FilterQueryStringSchema;
    /**
     * Schema for sorting items
     */
    sort?: SortingQueryStringSchema;
    offset?: PaginationQuerySchemaOffset;
    pageSize?: PaginationQuerySchemaPageSize;
  };
  url: "/api/public/posts";
};

export type PublicPostControllerGetPostsResponses = {
  /**
   * A list of public posts
   */
  200: PublicPostsSchema;
};

export type PublicPostControllerGetPostsResponse =
  PublicPostControllerGetPostsResponses[keyof PublicPostControllerGetPostsResponses];

export type CommentsControllerGetCommentsData = {
  body?: never;
  path: {
    postSlug: string;
  };
  query?: {
    /**
     * Filtering query string, in the format of "property:rule[:value];property:rule[:value];..."
     * <br> Available rules: eq, neq, gt, gte, lt, lte, like, nlike, in, nin, isnull, isnotnull
     * <br> Available properties: content
     */
    filter?: FilterQueryStringSchema;
    /**
     * Schema for sorting items
     */
    sort?: SortingQueryStringSchema;
    offset?: PaginationQuerySchemaOffset;
    pageSize?: PaginationQuerySchemaPageSize;
  };
  url: "/api/posts/{postSlug}/comments";
};

export type CommentsControllerGetCommentsResponses = {
  /**
   * Schema for a paginated list of comments
   */
  200: CommentsSchema;
};

export type CommentsControllerGetCommentsResponse =
  CommentsControllerGetCommentsResponses[keyof CommentsControllerGetCommentsResponses];

export type CommentsControllerCreateCommentData = {
  /**
   * Schema for creating a comment
   */
  body: CreateCommentSchema;
  path: {
    postSlug: string;
  };
  query?: never;
  url: "/api/posts/{postSlug}/comments";
};

export type CommentsControllerCreateCommentResponses = {
  /**
   * Schema for a comment
   */
  200: CommentSchema;
};

export type CommentsControllerCreateCommentResponse =
  CommentsControllerCreateCommentResponses[keyof CommentsControllerCreateCommentResponses];

export type CommentsControllerGetCommentCountData = {
  body?: never;
  path: {
    postSlug: string;
  };
  query?: never;
  url: "/api/posts/{postSlug}/comments/count";
};

export type CommentsControllerGetCommentCountResponses = {
  200: unknown;
};

export type CommentsControllerGetCommentRepliesData = {
  body?: never;
  path: {
    commentId: string;
  };
  query?: {
    /**
     * Schema for sorting items
     */
    sort?: SortingQueryStringSchema;
    offset?: PaginationQuerySchemaOffset;
    pageSize?: PaginationQuerySchemaPageSize;
  };
  url: "/api/posts/{postSlug}/comments/{commentId}/replies";
};

export type CommentsControllerGetCommentRepliesResponses = {
  /**
   * Schema for a paginated list of comments
   */
  200: CommentsSchema;
};

export type CommentsControllerGetCommentRepliesResponse =
  CommentsControllerGetCommentRepliesResponses[keyof CommentsControllerGetCommentRepliesResponses];

export type CommentsControllerDeleteCommentData = {
  body?: never;
  path: {
    commentId: string;
  };
  query?: never;
  url: "/api/posts/{postSlug}/comments/{commentId}";
};

export type CommentsControllerDeleteCommentResponses = {
  200: unknown;
};

export type ClientOptions = {
  baseUrl: string;
};
