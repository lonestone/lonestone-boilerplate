// This file is auto-generated by @hey-api/openapi-ts

export const CreatePostSchemaSchema = {
  type: ["object"],
  properties: {
    title: {
      type: ["string"],
      minLength: 1,
    },
    content: {
      type: ["array"],
      items: {
        $ref: "#/components/schemas/PostContentSchema",
      },
    },
  },
  required: ["title", "content"],
  title: "CreatePostSchema",
  description: "Schema for creating/updating a post",
} as const;

export const PostContentSchemaSchema = {
  type: ["object"],
  properties: {
    type: {
      type: ["string"],
      enum: ["text", "image", "video"],
    },
    data: {
      type: ["string"],
    },
  },
  required: ["type", "data"],
  title: "PostContentSchema",
  description: "Schema for content items (text, image, video)",
} as const;

export const UpdatePostSchemaSchema = {
  type: ["object"],
  properties: {
    title: {
      type: ["string"],
      minLength: 1,
    },
    content: {
      type: ["array"],
      items: {
        $ref: "#/components/schemas/PostContentSchema",
      },
    },
  },
  title: "UpdatePostSchema",
  description: "Schema for updating a post",
} as const;

export const CreateCommentSchemaSchema = {
  type: ["object"],
  properties: {
    content: {
      type: ["string"],
      minLength: 1,
      maxLength: 1000,
    },
    parentId: {
      type: ["string"],
      format: "uuid",
    },
  },
  required: ["content"],
  title: "CreateCommentSchema",
  description: "Schema for creating a comment",
} as const;

export const PaginationQuerySchemaSchema = {
  type: ["object"],
  properties: {
    offset: {
      default: 0,
      type: ["integer"],
      minimum: 0,
      description: "Starting position of the query",
    },
    pageSize: {
      default: 20,
      type: ["integer"],
      minimum: 1,
      maximum: 100,
      description: "Number of items to return",
    },
  },
  title: "PaginationQuerySchema",
  description: "Schema for pagination query",
} as const;

export const PaginationQuerySchema_offsetSchema = {
  default: 0,
  type: ["integer"],
  minimum: 0,
  description: "Starting position of the query",
} as const;

export const PaginationQuerySchema_pageSizeSchema = {
  default: 20,
  type: ["integer"],
  minimum: 1,
  maximum: 100,
  description: "Number of items to return",
} as const;

export const SortingQueryStringSchemaSchema = {
  type: ["string"],
  title: "SortingQueryStringSchema",
  description: "Schema for sorting items",
} as const;

export const FilterQueryStringSchemaSchema = {
  type: ["string"],
  title: "FilterQueryStringSchema",
  description: `Filtering query string, in the format of "property:rule[:value];property:rule[:value];..."
    <br> Available rules: eq, neq, gt, gte, lt, lte, like, nlike, in, nin, isnull, isnotnull 
    <br> Available properties: content`,
  example: "name:eq:John;age:gt:30",
} as const;

export const UserPostSchemaSchema = {
  type: ["object"],
  properties: {
    id: {
      type: ["string"],
      format: "uuid",
    },
    slug: {
      type: ["string", "null"],
    },
    title: {
      type: ["string"],
    },
    content: {
      type: ["array"],
      items: {
        $ref: "#/components/schemas/PostContentSchema",
      },
    },
    versions: {
      type: ["array"],
      items: {
        $ref: "#/components/schemas/PostVersionSchema",
      },
    },
    publishedAt: {
      type: ["string", "null"],
      format: "date-time",
    },
    type: {
      type: ["string"],
      enum: ["published", "draft"],
    },
    commentCount: {
      type: ["number"],
    },
  },
  required: ["id", "title", "content", "versions", "type"],
  title: "UserPostSchema",
  description: "Schema for a user's post",
} as const;

export const PostVersionSchemaSchema = {
  type: ["object"],
  properties: {
    id: {
      type: ["string"],
      format: "uuid",
    },
    title: {
      type: ["string"],
    },
    createdAt: {
      type: ["string"],
      format: "date-time",
    },
  },
  required: ["id", "title", "createdAt"],
  title: "PostVersionSchema",
  description: "Schema for a post version",
} as const;

export const UserPostsSchemaSchema = {
  type: ["object"],
  properties: {
    data: {
      type: ["array"],
      items: {
        type: ["object"],
        properties: {
          id: {
            type: ["string"],
            format: "uuid",
          },
          slug: {
            type: ["string", "null"],
          },
          title: {
            type: ["string"],
          },
          versions: {
            type: ["array"],
            items: {
              $ref: "#/components/schemas/PostVersionSchema",
            },
          },
          publishedAt: {
            type: ["string", "null"],
            format: "date-time",
          },
          type: {
            type: ["string"],
            enum: ["published", "draft"],
          },
          commentCount: {
            type: ["number"],
          },
          contentPreview: {
            $ref: "#/components/schemas/PostContentSchema",
          },
        },
        required: ["id", "title", "versions", "type", "contentPreview"],
      },
    },
    meta: {
      type: ["object"],
      properties: {
        offset: {
          type: ["number"],
        },
        pageSize: {
          type: ["number"],
        },
        itemCount: {
          type: ["number"],
        },
        hasMore: {
          type: ["boolean"],
        },
      },
      required: ["offset", "pageSize", "itemCount", "hasMore"],
    },
  },
  required: ["data", "meta"],
  title: "UserPostsSchema",
  description: "Schema for a list of user's posts",
} as const;

export const PublicPostSchemaSchema = {
  type: ["object"],
  properties: {
    title: {
      type: ["string"],
    },
    author: {
      type: ["object"],
      properties: {
        name: {
          type: ["string"],
        },
      },
      required: ["name"],
    },
    content: {
      type: ["array"],
      items: {
        $ref: "#/components/schemas/PostContentSchema",
      },
    },
    publishedAt: {
      type: ["string"],
      format: "date-time",
    },
    slug: {
      type: ["string"],
    },
    commentCount: {
      type: ["number"],
    },
  },
  required: ["title", "author", "content", "publishedAt"],
  title: "PublicPostSchema",
  description: "A public post",
} as const;

export const PublicPostsSchemaSchema = {
  type: ["object"],
  properties: {
    data: {
      type: ["array"],
      items: {
        type: ["object"],
        properties: {
          title: {
            type: ["string"],
          },
          author: {
            type: ["object"],
            properties: {
              name: {
                type: ["string"],
              },
            },
            required: ["name"],
          },
          publishedAt: {
            type: ["string"],
            format: "date-time",
          },
          slug: {
            type: ["string"],
          },
          commentCount: {
            type: ["number"],
          },
          contentPreview: {
            $ref: "#/components/schemas/PostContentSchema",
          },
        },
        required: ["title", "author", "publishedAt", "contentPreview"],
      },
    },
    meta: {
      type: ["object"],
      properties: {
        offset: {
          type: ["number"],
        },
        pageSize: {
          type: ["number"],
        },
        itemCount: {
          type: ["number"],
        },
        hasMore: {
          type: ["boolean"],
        },
      },
      required: ["offset", "pageSize", "itemCount", "hasMore"],
    },
  },
  required: ["data", "meta"],
  title: "PublicPostsSchema",
  description: "A list of public posts",
} as const;

export const CommentSchemaSchema = {
  type: ["object"],
  properties: {
    id: {
      type: ["string"],
      format: "uuid",
    },
    content: {
      type: ["string"],
    },
    authorName: {
      type: ["string", "null"],
    },
    createdAt: {
      type: ["string"],
      format: "date-time",
    },
    user: {
      type: ["object", "null"],
      properties: {
        id: {
          type: ["string"],
          format: "uuid",
        },
        name: {
          type: ["string"],
        },
      },
      required: ["id", "name"],
    },
    parentId: {
      type: ["string", "null"],
      format: "uuid",
    },
    replyIds: {
      type: ["array"],
      items: {
        type: ["string"],
        format: "uuid",
      },
    },
    replyCount: {
      type: ["number"],
    },
  },
  required: ["id", "content", "authorName", "createdAt", "user", "parentId"],
  title: "CommentSchema",
  description: "Schema for a comment",
} as const;

export const CommentsSchemaSchema = {
  type: ["object"],
  properties: {
    data: {
      type: ["array"],
      items: {
        $ref: "#/components/schemas/CommentSchema",
      },
    },
    meta: {
      type: ["object"],
      properties: {
        offset: {
          type: ["number"],
        },
        pageSize: {
          type: ["number"],
        },
        itemCount: {
          type: ["number"],
        },
        hasMore: {
          type: ["boolean"],
        },
      },
      required: ["offset", "pageSize", "itemCount", "hasMore"],
    },
  },
  required: ["data", "meta"],
  title: "CommentsSchema",
  description: "Schema for a paginated list of comments",
} as const;
